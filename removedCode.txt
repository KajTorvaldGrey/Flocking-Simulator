 /*
	public void CreateBlueUnits()
    {
        UnitsBlue = new GameObject[NumberUnit];
        for (int count = 0; count < NumberUnit - 1; count++)
        {
            Vector3 FishPosition = new Vector2(Random.Range(spawnDistance.x, spawnDistance.y), Random.Range(spawnDistance.x, spawnDistance.y)); UnitsBlue[count] =
                  Instantiate(unitPrefabB, this.transform.position + FishPosition, Quaternion.identity);
            //Vector3 FishPosition = new Vector2(Random.Range(-5f, 5f), Random.Range(-5f, 5f)); UnitsBlue[count] =
            //       Instantiate(unitPrefab, this.transform.position + FishPosition, Quaternion.identity);
            UnitsBlue[count].GetComponent<UnitBlue>().manager = this.gameObject;
        }
    }
    void CreateRedUnits()
    {
        UnitsRed = new GameObject[NumberUnit];
        for (int count = 0; count < NumberUnit - 1; count++)
        {
            Vector3 FishPosition = new Vector2(Random.Range(spawnDistance.x + 10, spawnDistance.y + 10), Random.Range(spawnDistance.x, spawnDistance.y)); UnitsRed[count] =
                      Instantiate(UnitPrefabR, this.transform.position + FishPosition, Quaternion.identity);
            UnitsRed[count].GetComponent<UnitRed>().manager = this.gameObject;
        }
    }
    void CreateGreenUnits()
    {
        UnitsGreen = new GameObject[NumberUnit];
        for (int count = 0; count < NumberUnit - 1; count++)
        {
            Vector3 FishPosition = new Vector2(Random.Range(spawnDistance.x - 10, spawnDistance.y - 10), Random.Range(spawnDistance.x, spawnDistance.y)); UnitsGreen[count] =
                      Instantiate(UnitPrefabG, this.transform.position + FishPosition, Quaternion.identity);
            UnitsGreen[count].GetComponent<UnitGreen>().manager = this.gameObject;
        }
    }
    */

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — 

   
    //public void CreateObstacles()
    //{
        //    int Totalspawned = 0;
        //    Blocks = new GameObject[NumberBlocks];
        //    for (arraypointer = 0; arraypointer < wantedblocks; arraypointer++)
        //    {

        //        Vector3 BlockPosition = new Vector2(Random.Range(spawnDistance.x, spawnDistance.y),
      //            Random.Range(spawnDistance.x, spawnDistance.y));
    //        Blocks[arraypointer] = Instantiate(hazardprefab, this.transform.position + BlockPosition, Quaternion.identity);

    //        Blocks[arraypointer].GetComponent<UnitBlock>().manager = this.gameObject;
    //        Totalspawned++;

        //for (int k = Squares.Count; k<wantedblocks; k++)
        //{
        //    int randx = Random.Range(-30, 30);
        //    int randy = Random.Range(-20, 20); 

        //    Squares.Push((GameObject)Instantiate(Obstacle, new Vector3(randx,randy 
        //        , Obstacle.transform.position.z), Obstacle.transform.rotation));
           
        //    Obstacle.AddComponent<UnitBlock>();
        //    NumberBlocks++;
        
        //wantedblocks = 0;

//    void TestObstacles()
//    {
//        int testNumber = 4;
//        int compare = Random.Range(1, 100);

//        if (testNumber == compare)
//        {
//            if (wantedblocks > 0)
//            {
//                CreateObstacles();
//            }
//            if (wantedblocks < 0)
//            {
//                wantedblocks = 0;
//            }

//            if (NumberBlocks < 0)
//            {
//                NumberBlocks = 0;
//            }
//        }   
//    }  